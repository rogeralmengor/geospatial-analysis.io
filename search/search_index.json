{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Description","text":"<p>The Geospatial Analysis Toolbox is a collection of functions and algorithms designed to assist geospatial developers in solving common problems encountered in geospatial analysis. This repository provides implementations of these solutions in the programming languages, including Python, Julia, and Geoogle Earth Engine Java Script API. The examples can be modified to fit the requirements of your geospatial solutions.</p> <p>Author Roger Almengor Gonz\u00e1lez</p> <p>Contact and website rogeralmengor@gmail.com roger-almengor.xyz</p>"},{"location":"GoogleEarthEngine/","title":"GoogleEarthEngine","text":"<p>Welcome to the Google Earth Engine section of this documentation. This section is dedicated to providing a solution-based approach to various geospatial analytics problems, complete with code explanations and illustrative outputs. The code presented here is based on the concepts and functionalities offered by the Google Earth Engine (GEE) JavaScript API.</p> <p>If you are unfamiliar with the GEE JavaScript API or need further information on its usage and capabilities, you can refer to the official Google Earth Engine JavaScript API documentation. This documentation serves as a valuable resource for understanding the core functionalities of the GEE platform and its JavaScript API, which form the foundation for the solutions and projects presented in this section. </p> <p>Feel free to explore the projects and code examples provided here to gain insights into how GEE can be leveraged for various geospatial analysis tasks.</p>"},{"location":"GoogleEarthEngine/#time-lapse-landsat-images","title":"\ud83c\udfa5 Time Lapse (Landsat Images) \ud83c\udf0d","text":"<p>Time lapse animations, are an interesting tool used to visualize changes on the earth surface over time. The following animation is created by the code provided, and shows the changes over a 20 years period of time by the construction of a river dam in the province of Chiriqui, Republic of Panam\u00e1.</p> <p> Time Lapse of Landsat Images from the Google Earth Engine platform. </p> Code time_lapse.js<pre><code>/*******************************************************************************\n * Downloading Image Chips for Hidroelectrica dos Mares\n * Location: El Valle de Las Lomas, Chiriqu\u00ed, Panam\u00e1\n * Author: Roger Almengor Gonz\u00e1lez\n * Data 26.09.2022\n * Project: CAP 2022\n * Land: Bayern\n * ****************************************************************************/\n// Feature Collection \nvar municipalities = ee.List(['Bijagual', 'Chiriqu\u00ed', 'Cochea', 'David',\n'Las Lomas','Gualaca', 'Rinc\u00f3n', 'Paja de Sombrero', 'Caldera', 'Dos R\u00edos', 'Los Anastacios', 'Dolega', 'Pedregal', 'San Pablo Viejo', 'San Pablo Nuevo', 'San Carlos', 'Hornito', 'Tinajas'])\nvar AOI = table.filter(ee.Filter.inList('NAME_3', municipalities));\nvar municipalities = AOI.filter(ee.Filter.eq('NAME_1', 'Chiriqu\u00ed'));\nvar district_list = ee.List(['Gualaca', 'Boquete', 'Dolega', 'David'])\nvar municipalities = municipalities.filter(ee.Filter.inList('NAME_2', district_list))\nprint(AOI);\nMap.addLayer(municipalities);\nvar cochea_district = table.filter(ee.Filter.eq('NAME_3', 'Chiriqu\u00ed'))\nvar centroid_cochea_coor = cochea_district.geometry().centroid()\n.coordinates().getInfo()\nvar x = centroid_cochea_coor[0];\nvar y = centroid_cochea_coor[1];\nprint(x); print(y);\nMap.setCenter(x, y, 12);\n// Elaborating the dates\n// Getting Temperatures for Every Month\nvar period = ['-01-01', '-12-01']; var years = [['1999', '2000'],\n['2000', '2001'],\n['2001', '2002'],\n['2002', '2003'],\n['2003', '2004'],\n['2004', '2005'],\n['2005', '2006'],\n['2006', '2007'],\n['2007', '2008'],\n['2008', '2009'], ['2009', '2010'], ['2010', '2011'],\n['2011', '2012'],\n['2012', '2013'],\n['2013', '2014'],\n];\nvar add_period = function(year){\nvar start_date = period[0]; var end_date = period[1];\nreturn [year[0] + start_date, year[1] + end_date];\n};\nvar visualization = {\nbands: ['SR_B4', 'SR_B3', 'SR_B2'],\nmin: 0.0,\nmax: 0.4,\n};\nvar visualization_ = {\nbands: ['SR_B4_median', 'SR_B3_median', 'SR_B2_median'],\nmin: 0.0,\nmax: 0.4,\n};\nvar concatenate_year_with_periods = function(years, period){\nreturn years.map(add_period);\n};\nvar Dates = concatenate_year_with_periods(years, period);\nprint(Dates);\n/***********************************************************************\n   Landsat 5\n************************************************************************/\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\nvar opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\nvar thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);\nreturn image.addBands(opticalBands, null, true)\n.addBands(thermalBand, null, true);\n}\nvar dataset = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')\n.filterDate('1999-01-01', '2020-12-31')\n.filterBounds(municipalities)\n.map(applyScaleFactors)\n.map(function(image){return image.clip(municipalities)});\n/*******************************************************************************\n* Downloading Image Chips for Hidroelectrica dos Mares\n* Location: El Valle de Las Lomas, Chiriqu\u00ed, Panam\u00e1\n* Author: Roger Almengor Gonz\u00e1lez\n* Data 26.09.2022\n* Project: CAP 2022\n* Land: Panama\n* *****************************************************************************/\n// Feature Collection \n//var municipalities = ee.List(['Bijagual', 'Chiriqu\u00ed', 'Cochea', 'David',\n// 'Las Lomas','Gualaca', 'Rinc\u00f3n',\n//'Paja de Sombrero', 'Caldera', 'Dos R\u00edos', 'Los Anastacios', 'Dolega', \n//'Pedregal', 'San Pablo Viejo', 'San Pablo Nuevo', 'San Carlos', 'Hornito', \n// 'Tinajas'])\n// Feature Collection \nvar municipalities = ee.List(['Bijagual','Cochea','Las Lomas'])\nvar AOI = table.filter(ee.Filter.inList('NAME_3', municipalities));\nvar municipalities = AOI.filter(ee.Filter.eq('NAME_1', 'Chiriqu\u00ed'));\nvar district_list = ee.List(['Gualaca', 'Boquete', 'Dolega', 'David'])\nvar municipalities = municipalities.filter(ee.Filter.inList('NAME_2', district_list))\n// Gets the bounds and create geometry\nvar extent = municipalities.geometry().bounds();\nvar buffered_extent = extent.buffer(ee.Number(10000)\n.sqrt()\n.divide(2), 1)\n.bounds();\n//var municipalities = geometry\nMap.addLayer(municipalities);\nvar cochea_district = table.filter(ee.Filter.eq('NAME_3', 'Bijagual'))\nvar centroid_cochea_coor = cochea_district.geometry()\n.centroid()\n.coordinates()\n.getInfo()\nvar x = centroid_cochea_coor[0];\nvar y = centroid_cochea_coor[1];\nMap.setCenter(x, y, 10);\n// Elaborating the dates\n// Getting Temperatures for Every Month\nvar period = ['-01-01', '-12-01']; var years = [['1999', '2000'],\n['2000', '2001'],\n['2001', '2002'],\n['2002', '2003'],\n['2003', '2004'],\n['2004', '2005'],\n['2005', '2006'],\n['2006', '2007'],\n['2007', '2008'],\n['2008', '2009'], ['2009', '2010'], ['2010', '2011'],\n['2011', '2012'],\n['2012', '2013'],\n['2013', '2014'],\n];\nvar add_period = function(year){\nvar start_date = period[0]; var end_date = period[1];\nreturn [year[0] + start_date, year[1] + end_date];\n};\nvar visualization = {\nbands: ['SR_B4', 'SR_B3', 'SR_B2'],\nmin: 0.0,\nmax: 0.4,\n};\nvar visualization_ = {\nbands: ['SR_B4_median', 'SR_B3_median', 'SR_B2_median'],\nmin: 0.0,\nmax: 0.4,\n};\nvar concatenate_year_with_periods = function(years, period){\nreturn years.map(add_period);\n};\nvar Dates = concatenate_year_with_periods(years, period);\n/**********************************************************************\n    Landsat 7 \n***********************************************************************/\nvar visualization = {\nbands: ['B4', 'B3', 'B2'],\nmin: 0.0,\nmax: 0.3,\n};\nvar visualization_ = {\nbands: ['B4_median', 'B3_median', 'B2_median'],\nmin: 0.0,\nmax: 0.5,\ngamma: [0.95, 1.1, 1]\n};\n// Applies scaling factors.\nvar cloudMaskL7 = function(image) {\nvar qa = image.select('BQA');\nvar cloud = qa.bitwiseAnd(1 &lt;&lt; 4)\n.and(qa.bitwiseAnd(1 &lt;&lt; 6))\n.or(qa.bitwiseAnd(1 &lt;&lt; 8));\nvar mask2 = image.mask().reduce(ee.Reducer.min());\nreturn image\n//.select(['B3', 'B4'], ['Red', 'NIR'])\n.updateMask(cloud.not()).updateMask(mask2)\n.set('system:time_start', image.get('system:time_start'));\n};\nvar dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')\n.filterDate('1999-01-01', '2020-12-31')\n.filterBounds(AOI)\n//.map(applyScaleFactors)\n.map(cloudMaskL7)\n.map(function(image){return image.clip(municipalities)});\n//dataset = dataset.map(applyScaleFactors);\n// Creating composites using median pixel value\nvar median_yearly_landsat_7 = function(start, end){\nvar dataset_ =  dataset.filter(ee.Filter.date(start, end));\nvar median_yearly = dataset_.reduce(ee.Reducer.median());\nreturn median_yearly;\n};\nvar composite_name_list_l7 = ee.List([]);\nvar apply_monthly_composite = function(date_list){\nvar start = date_list[0];\nvar end = date_list[1]; var output_name = start + \"TO\" + end + \"_LANSAT_7\";\nvar composite = median_yearly_landsat_7(start, end);\ncomposite_name_list_l7 = composite_name_list_l7.add([composite, output_name]);\nMap.addLayer(composite, visualization_, output_name, false);\nExport.image.toDrive({\nimage: composite,\ndescription: output_name,\nfileFormat: 'GeoTIFF',\ncrs : 'EPSG:4326',\nfolder : 'LANDSAT_LST_LAS_LOMAS',\nregion: municipalities\n});\nreturn 0; };\nDates.map(apply_monthly_composite); /******************************************************************\n// Animation gif \n// Create RGB visualization images for use as animation frames.\n/******************************************************************/\nvar text = require('users/gena/packages:text');\nvar annotated_collection_list = ee.List([])\nvar annotations = [\n{position: 'left', offset: '0.25%', margin: '0.25%', property: 'label', scale: 250} //large scale because image if of the whole world. Use smaller scale\n];\nvar create_annotated_collection = function(image_and_id) {\nvar img = image_and_id[0];\nvar image_id = image_and_id[1];\nprint(image_id);\nvar img_out = img.visualize(visualization_)\n//.clip(geometry)//.paint(municipalities, 'FF0000', 2)\n.set({'label': image_id});\nMap.addLayer(img_out);\nvar annotated = text.annotateImage(img_out, {}, Bayern, annotations);\nannotated_collection.add(annotated);\nreturn 0;\n};\nvar municipalities_geom = geometry;\nvar n = composite_name_list_l7.size().getInfo();\nprint(n);\nfor (var i = 0; i &lt; n; i++) {\nvar img_info = ee.List(composite_name_list_l7.get(i));\nprint(img_info);\nvar img = ee.Image(img_info.get(0));\nvar img_id = ee.String(img_info.get(1));\nvar year = ee.String(ee.List(img_id.split(\"-\").get(0)));\nvar month = ee.String(ee.List(img_id.split(\"-\").get(1)));\nvar img_id_ = year.getInfo() // + \"_\" + month.getInfo();\nvar img_out = img.visualize(visualization_)\n//.paint(geometry, 'FF0000', 2)\n.set({'label': img_id_});\nvar annotated = text.annotateImage(img_out, {}, buffered_extent, annotations);\nMap.addLayer(annotated);\nvar annotated_collection_list = annotated_collection_list.add(annotated)\n}\nvar annotated_col = ee.ImageCollection(annotated_collection_list)\n// Define GIF visualization parameters.\nvar gifParams = {\n'region': buffered_extent,\n'dimensions': 508,\n//'crs': 'EPSG:32632',\n'framesPerSecond': 1\n};\n// Print the GIF URL to the console.\nprint(annotated_col.getVideoThumbURL(gifParams));\n// Render the GIF animation in the console.\nprint(ui.Thumbnail(annotated_col, gifParams));\n</code></pre>"},{"location":"GoogleEarthEngine/#measuring-land-surface-temperature-with-modis-data","title":"\ud83c\udf10 Measuring land surface temperature with MODIS data \ud83c\udf21\ufe0f\ud83d\udef0\ufe0f","text":"<p>Script Description: This script is designed to analyze temperature changes within the Cochea River watershed using the Google Earth Engine (GEE) platform and MODIS (Moderate Resolution Imaging Spectroradiometer) datasets. Specifically, it focuses on measuring temperature variations during both the rainy and dry seasons over a 20-year period. The primary objectives of this script are to generate an animated GIF, a time series graph depicting the Average Median Temperature (\u00b0C) as recorded by the MODIS sensor, and a regional overview of the study area.</p> <p>Script Workflow: 1. Data Acquisition: The script begins by accessing MODIS datasets, which provide reliable temperature data with global coverage and high temporal resolution.</p> <ol> <li> <p>Temporal Selection: It then filters the MODIS data to isolate the specific time periods corresponding to the dry and wet seasons over the 20-year span.</p> </li> <li> <p>Spatial Region Selection: The script defines the study area within the Cochea River watershed, ensuring that the analysis is limited to the relevant geographic scope.</p> </li> <li> <p>Temperature Computation: Using the MODIS temperature data, the script calculates the Average Median Temperature (\u00b0C) for each pixel within the study area, both for the dry and wet seasons.</p> </li> <li> <p>Visualization Generation:</p> </li> <li> <p>Animated GIF: The script generates an animated GIF, showcasing the temporal evolution of temperature changes over the 20-year period. Each frame of the GIF represents a specific time step, offering a dynamic visual representation of temperature variations.     <p> Time Lapse of MODIS Land Surface Temperature (Dry Season) from the Google Earth Engine platform. </p> <p> Time Lapse of MODIS Land Surface Temperature (Rainy Season) from the Google Earth Engine platform. </p> </p> </li> <li> <p>Time Series Graph: Additionally, the script creates a time series graph, displaying the Average Median Temperature (\u00b0C) as a function of time. This graph provides a clear overview of temperature trends during the dry and wet seasons.     <p> Average median temperature for the Dry Season measured from MODIS time series. </p> </p> <p><p> Average median temperature for the Wet Season measured from MODIS time series. </p> </p> </li> <li> <p>Regional View: Lastly, the script produces a regional view of the study area, allowing users to geospatially contextualize the temperature changes observed in the Cochea River watershed.</p> <p><p> Regional view of the study area. </p> </p> </li> </ol> <p>By following this technical script, users can conduct a rigorous analysis of temperature fluctuations within the specified region and timeframes, enabling in-depth insights into environmental changes over the 20-year period.</p> Code land_surface_MODIS.js<pre><code>// Feature Collection \nvar districts = ee.List(['Bijagual','Cochea','Las Lomas'])\nvar AOI = table.filter(ee.Filter.inList('NAME_3', districts));\nvar districts = AOI.filter(ee.Filter.eq('NAME_1', 'Chiriqu\u00ed'));\nMap.addLayer(districts.union())\n// Setting the Map to the coordinates of one of our districts\nvar cochea_district = table.filter(ee.Filter.eq('NAME_3', 'Bijagual'));\nvar centroid_cochea_coor = cochea_district.geometry().centroid().coordinates().getInfo();\nvar x = centroid_cochea_coor[0];\nvar y = centroid_cochea_coor[1];\nMap.setCenter(x, y, 10);\n// Raster Visualization Parameters\nvar landSurfaceTemperatureVis = {\nmin: 0, max: 40,\npalette: ['blue', 'limegreen', 'yellow', 'darkorange', 'red']};\n// Image Collection MODIS Surface Temperature Median Values \n// (Dry Season January - March)\n// (Wet Season April - December)\nvar startYear = 2001;\nvar endYear = 2020;\nvar DrySeasonMedianCollection = ee.ImageCollection(\nee.List.sequence(startYear, endYear)\n.map(createDrySeasonMedianComposite)\n);\nvar WetSeasonMedianCollection = ee.ImageCollection( ee.List.sequence(startYear, endYear)\n.map(createWetSeasonMedianComposite)\n);\nfunction createDrySeasonMedianComposite(year) {\nvar startDate = ee.Date.fromYMD(year, 1, 1);\nvar endDate = ee.Date.fromYMD(year, 3, 31);\nvar description = startDate.format('yyyy-MM-dd')\n.cat(' TO ')\n.cat(endDate.format('yyyy-MM-dd'));\nreturn ee.ImageCollection('MODIS/061/MOD11A1')\n.filterBounds(districts)\n.filterDate(startDate, endDate)\n.select('LST_Day_1km')\n.map(function(img) {\nreturn img\n.multiply(0.02)\n.subtract(273.15)\n.copyProperties(img, ['system:time_start']);\n})\n.median()\n.set('year', year)\n.set('description', description);\n}\nfunction createWetSeasonMedianComposite(year) {\nvar startDate = ee.Date.fromYMD(year, 4, 1);\nvar endDate = ee.Date.fromYMD(year, 12, 31);\nvar description = startDate.format('yyyy-MM-dd')\n.cat(' TO ')\n.cat(endDate.format('yyyy-MM-dd'));\nreturn ee.ImageCollection('MODIS/061/MOD11A1')\n.filterBounds(districts)\n.filterDate(startDate, endDate)\n.select('LST_Day_1km')\n.map(function(img) {\nreturn img\n.multiply(0.02)\n.subtract(273.15)\n.copyProperties(img, ['system:time_start']);\n})\n.median()\n.set('year', year)\n.set('description', description);\n}\nDrySeasonMedianMultiBandImg = DrySeasonMedianCollection\n.toBands()\n.select('[0-9]{1,2}_LST_Day_1km');\nWetSeasonMedianMultiBandImg = WetSeasonMedianCollection\n.toBands()\n.select('[0-9]{1,2}_LST_Day_1km');\n// Define a dictionary that associates band names with values \nvar TempInfo = {\n'0_LST_Day_1km': {v: 1, f: '2001'},\n'1_LST_Day_1km': {v: 2, f: '2002'},\n'2_LST_Day_1km': {v: 3, f: '2003'},\n'3_LST_Day_1km': {v: 4, f: '2004'},\n'4_LST_Day_1km': {v: 5, f: '2005'},\n'5_LST_Day_1km': {v: 6, f: '2006'},\n'6_LST_Day_1km': {v: 7, f: '2007'},\n'7_LST_Day_1km': {v: 8, f: '2008'},\n'8_LST_Day_1km': {v: 9, f: '2009'},\n'9_LST_Day_1km': {v: 10, f: '2010'},\n'10_LST_Day_1km': {v: 11, f: '2011'},\n'11_LST_Day_1km': {v: 12, f: '2012'},\n'12_LST_Day_1km': {v: 13, f: '2013'},\n'13_LST_Day_1km': {v: 14, f: '2014'},\n'14_LST_Day_1km': {v: 15, f: '2015'},\n'15_LST_Day_1km': {v: 16, f: '2016'},\n'16_LST_Day_1km': {v: 17, f: '2017'},\n'17_LST_Day_1km': {v: 18, f: '2018'},\n'18_LST_Day_1km': {v: 19, f: '2019'},\n'19_LST_Day_1km': {v: 20, f: '2020'},\n}\nvar xPropVals = [];\nvar xPropLabels = [];\nfor (var key in TempInfo){\nxPropVals.push(TempInfo[key].v);\nxPropLabels.push(TempInfo[key]);\n}\n// Apply the dissolve method to the Geometry object.\nprint(districts)\nvar geometryDissolve = districts.union();\n// Define the chart and print it to the console.\nvar chartDrySeason = ui.Chart.image\n.regions({\nimage: DrySeasonMedianMultiBandImg,\nregions: districts.union(),\nreducer: ee.Reducer.mean(),\nscale: 500,\nseriesProperty: 'label',\nxLabels: xPropVals\n})\n.setChartType('LineChart')\n.setOptions({\ntitle: 'Average (Median) Temperature (\u00b0C) Dry Season (Jan-Mar)',\nhAxis: {\ntitle: 'Year',\ntitleTextStyle: {italic: false, bold: true},\nticks: xPropLabels\n},\nvAxis: {\ntitle: 'Temperature (\u00b0C)',\ntitleTextStyle: {italic: false, bold: true}\n},\ncolors: ['f0af07', '0f8755', '76b349'],\nlineSize: 3\n});\nprint(chartDrySeason);\n// Define the chart and print it to the console.\nvar chartWetSeason = ui.Chart.image\n.regions({\nimage: WetSeasonMedianMultiBandImg ,\nregions: districts.union(),\nreducer: ee.Reducer.mean(),\nscale: 500,\nseriesProperty: 'label',\nxLabels: xPropVals\n})\n.setChartType('LineChart')\n.setOptions({\ntitle: 'Average (Median) Temperature (\u00b0C) Rainy Season (Apr-Dec)',\nhAxis: {\ntitle: 'Year',\ntitleTextStyle: {italic: false, bold: true},\nticks: xPropLabels\n},\nvAxis: {\ntitle: 'Temperature (\u00b0C)',\ntitleTextStyle: {italic: false, bold: true}\n},\ncolors: ['0f8755', '76b349'],\nlineSize: 3\n});\nprint(chartWetSeason);\n// Define GIF visualization parameters.\nvar gifParams = {\n'region': buffered_extent,\n'dimensions': 600,\n'framesPerSecond': 1.5\n};\nvar text = require('users/gena/packages:text'); // Import gena's package which allows text overlay on image\nvar annotations = [\n{position: 'left', offset: '0.25%', margin: '0.25%', property: 'label', scale: 100} //large scale because image if of the whole world. Use smaller scale otherwise\n];\nfunction addText(image){\nvar image_0 = image.clip(districts.union());\nvar timeStamp = image.get('description'); // get the time stamp of each frame. This can be any string. Date, Years, Hours, etc.\nvar timeStamp_ = ee.String(timeStamp); //convert time stamp to string \nvar image_ = image_0.visualize(landSurfaceTemperatureVis).set({'label':timeStamp}); // set a property called label for each image\nvar annotated = text.annotateImage(image_, {}, extent, annotations); // create a new image with the label overlayed using gena's package\nreturn annotated;\n}\nvar AnnotatedCollectionWetSeason = WetSeasonMedianCollection.map(addText); //add time stamp to all images\nvar AnnotatedCollectionDrySeason = DrySeasonMedianCollection.map(addText);\nprint(ui.Thumbnail(AnnotatedCollectionWetSeason,  gifParams));\nvar AnnotatedCollectionDrySeason = DrySeasonMedianCollection.map(addText);\nprint(ui.Thumbnail(AnnotatedCollectionDrySeason,  gifParams));\n// ui.Map objects can be constructed. Here, a new map is declared.\nvar newMap = ui.Map({\ncenter: {lat: 8, lon: -80, zoom: 5.5\n},\nstyle: {position: 'bottom-right', width: '400px'}\n});\nvar geomLayer = ui.Map.Layer(districts.union(), {color: 'red'}, 'Area of Interest');\nvar extentLayer = ui.Map.Layer(districts.bounds, {color:'red'}, 'Extent');\nnewMap.add(geomLayer);\nnewMap.add(extentLayer);\n// Add the newMap to the defaultMap;\nMap.add(newMap);\n// Other UI widgets can be added to ui.Map objects, for example labels:\ndefaultMap.add(ui.Label('Countrywide location', {position: 'bottom-left'}));\nnewMap.add(ui.Label('Regional Location', {position: 'bottom-left'}));\nMap.setControlVisibility({all: false});\nnewMap.setControlVisibility({all: false});\nMap.setOptions(\"SATELLITE\");\n</code></pre> <p>Certainly! Here's a condensed version of your blog post, transformed into a LinkedIn-style geospatial analysis post:</p>"},{"location":"GoogleEarthEngine/#time-lapse-radar-images-panama-canal","title":"\ud83c\udf0d Time Lapse (RADAR Images) - Panama Canal \ud83d\udef6 \ud83d\udca7","text":"<p>Objective</p> <p>To commemorate World Water Day, this analysis explores the significance of freshwater sources within the Panama Canal Zone. Our primary goal is to gain insights into the role of these water bodies in sustaining the Panama Canal and supporting the surrounding ecosystems and communities.     <p> Time Series of Radar (Sentinel-1) Imagery. Year 2022, Panama Canal Zone. </p> </p> <p>Methodology</p> <p>In this analysis, we utilize Sentinel-1 imagery due to its exceptional ability to provide clear, all-weather views of the Earth's surface. Our methodology can be broken down into the following key steps:</p> <ol> <li> <p>Filtering Area of Interest (AOI): We narrow our focus to specific regions, including the Panama Province and select districts.</p> </li> <li> <p>Date Range Selection: Images from 2022 are chosen for analysis.</p> </li> <li> <p>Image Clipping and Masking: We create buffered extents and apply masks to Sentinel-1 images.</p> </li> <li> <p>Image Collection and Filtering: We gather images with precise properties, including polarization, resolution, and instrument mode.</p> </li> <li> <p>Backscatter Analysis: Backscatter graphs for VH and VV bands are generated to monitor changes over time.</p> </li> <li> <p>Image Visualization: We visualize images and create RGB representations for animations.</p> </li> </ol> Code sentinel_1_time_lapse.js<pre><code>// Filtering Feature Collection to Area of Interest (AOI)\nvar GAUL_country_boundaries = ee.FeatureCollection(\"FAO/GAUL/2015/level2\");\nvar provinces = ee.List(['Panam\u00e1', 'Col\u00f3n'])\nvar Panama =  GAUL_country_boundaries.filter(ee.Filter.inList('ADM1_NAME', provinces));\nprint(Panama)\nMap.addLayer(Panama, {color: 'green'}, 'Panama Province');\nvar districts = ee.List(['Arraij\u00e1n', 'Panam\u00e1', 'San Miguelito', 'Col\u00f3n','Chagres']);\nvar Panama = Panama.filter(ee.Filter.inList('ADM2_NAME', districts));\nMap.addLayer(Panama);\n//Parameter: Start and End date for images to be queried\nvar start = '2022-01-01';\nvar end = '2022-12-31';\nvar dateRange = ee.DateRange(start, end); // Gets the bounds and create geometry (rectangle around the polygon)\nvar extent = Panama.geometry().bounds();\n//Map.addLayer(extent); // Adds this geometry to the map\n// Creating a buffered version of the extent\nvar buffered_extent = extent.buffer(ee.Number(50000).sqrt().divide(2), 1).bounds();\nMap.addLayer(buffered_extent); // Adds this geometry to the map\n// Centering the map to our target parcel\nMap.centerObject(Panama, 15);\n// Function to clip image \nfunction clip_image(image){\nreturn image.clip(buffered_extent); }\n// Function to mask image to certain backscatter signal\nfunction update_s1_mask(image) {\nvar edge = image.lt(-30.0);\nvar maskedImage = image.mask().and(edge.not());\nreturn image.updateMask(maskedImage);\n}\n// Getting an image collection of Sentinel-1 GRDH and VV-VH bands\nvar s1_collection = ee.ImageCollection('COPERNICUS/S1_GRD')\n.filterDate(dateRange)\n.filterBounds(buffered_extent)\n.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))\n.filter(ee.Filter.eq('resolution_meters', 10))\n.filter(ee.Filter.eq('instrumentMode', 'IW'))\n.map(update_s1_mask);\nvar s1_collection_ = s1_collection.select(['VV', 'VH']);\n// Dividing the collection according to Orbits (Ascending or Descending)\nvar desc = s1_collection_.filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'));\nvar asc = s1_collection_.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'));\n// Checking out how many images are in every batch (ascending, descending)\nprint('descending tiles ', desc.size());\nprint('ascending tiles ', asc.size());\n// Create backscatter (dB) graph for VH and VV bands of Sentinel-1\nvar chart =\nui.Chart.image\n.series({\nimageCollection: desc,\nregion: Panama,\nreducer: ee.Reducer.median(),\nscale: 500,\nxProperty: 'system:time_start'\n})\n.setSeriesNames([])\n.setOptions({\ntitle: 'Median dB for parcel: ' + \"Panama_Canal_Zone\",\nhAxis: {title: 'Date', titleTextStyle: {italic: false, bold: true}},\nvAxis: {\ntitle: 'Backscatter (dB)',\ntitleTextStyle: {italic: false, bold: true}\n},\nlineWidth: 5,\ncolors: ['#00FF7F', '#3CB371'],\ncurveType: 'function'\n});\nprint(chart);\n// Paint the edges with different colors and widths.\nvar empty = ee.Image().byte();\nvar outlines = empty.paint({\nfeatureCollection: Panama,\nwidth: 'NNH'\n});\nvar palette = ['#FFFF00'];\n// Adding every image of the image collection on the Map\nvar s1_vis_params = {bands: [\"VV\",\"VH\",\"VV\"],\nmin: -25, max: 5, gamma:1, opacity:1};\nfunction addImage(image) { var id = image.id;\nvar image_ = ee.Image(image.id);\nMap.addLayer(image_, s1_vis_params, id)}\nasc.evaluate(function(asc) {  // use map on client-side\nasc.features.map(addImage);\nMap.addLayer(outlines, {palette: palette, max: 14}, 'Panama');\n});\n// Create RGB visualization images for use as animation frames.\nvar rgbVis = asc.map(function(img) {\nreturn img.visualize(s1_vis_params).clip(buffered_extent);\n});\n//Create an animated GIF\n// Define GIF visualization parameters.\nvar gifParams = {\n'region': buffered_extent,\n'dimensions': 1100,\n'crs': 'EPSG:4326',\n'framesPerSecond': 5\n};\n// Print the GIF URL to the console.\nprint(rgbVis.getVideoThumbURL(gifParams));\n// Render the GIF animation in the console.\nprint(ui.Thumbnail(rgbVis, gifParams));\n</code></pre>"},{"location":"GoogleEarthEngine/#monitoring-nitrogen-dioxide-in-panama-city-with-sentinel-5p-imagery","title":"\ud83d\udca8 Monitoring Nitrogen Dioxide in Panama City with Sentinel-5P Imagery \ud83c\udfd9\ufe0f","text":"<p>Objective:</p> <p>The objective of this analysis is to create composites of Sentinel-5P imagery to measure nitrogen dioxide (NO2) levels in the city of Panama City during the COVID-19 lockdown period. This analysis aims to provide insights into the variations in tropospheric NO2 density over time, particularly during the lockdown period, and visualize these changes using composites and a time-lapse GIF. The analysis also includes the creation of a chart to represent the mean NO2 levels over the selected area of interest.</p> <p>Steps:</p> <ol> <li> <p>Filtering Area of Interest (AOI): The analysis starts by defining the Area of Interest (AOI) using geographical boundaries data. The AOI encompasses specific districts within the Panama Province, including Arraij\u00e1n, Panam\u00e1, and San Miguelito. The map is centered on the coordinates of this AOI.</p> </li> <li> <p>Setting Visualization Parameters: Visualization parameters for the NO2 density are defined, including the minimum, maximum values, and color palette to be used for rendering the imagery.</p> </li> <li> <p>Setting the Date Range: The analysis specifies the start and end dates for image collection. In this case, the date range spans from January 1, 2020, to December 31, 2022.</p> </li> <li> <p>Creating Image Composites: The script creates monthly image composites of Sentinel-5P tropospheric NO2 density within the defined AOI. These composites are generated for each month of each year in the specified date range.</p> </li> <li> <p>Renaming Images: The image composites are renamed to include the year and month information in their system index.</p> </li> <li> <p>Creating a Time-Lapse GIF: The script combines the renamed image composites into a time-lapse GIF. It annotates each frame of the GIF with a timestamp to indicate the year and month of the data. The GIF visually shows the changes in tropospheric NO2 density over time within the AOI.</p> </li> <li> <p>Creating a Chart: A chart is generated to display the mean tropospheric NO2 column number density for the selected AOI over time. This chart provides a quantitative representation of the NO2 levels during the analysis period.     <p> Tropospheric NO2 column \u2013 Chart </p> </p> </li> <li> <p>Displaying Yearly Composites: Finally, yearly composites for 2019, 2020, 2021, and 2022 are added to the map, allowing for a comparison of NO2 levels across these years.     <p> Nitrogen Dioxide tropospheric column \u2013 Panama City \u2013 2019-2022  </p>  This analysis provides a comprehensive overview of tropospheric NO2 density changes in Panama City, with a focus on the COVID-19 lockdown period. The time-lapse GIF and chart enhance the visualization and understanding of these changes over time.</p> </li> </ol> Code nitrogen_dioxide_monitoring.js<pre><code>// Filtering Feature Collection to Area of Interest (AOI)\nvar GAUL_country_boundaries = ee.FeatureCollection(\"FAO/GAUL/2015/level2\");\nvar Panama = GAUL_country_boundaries.filter(ee.Filter.eq('ADM1_NAME', 'Panam\u00e1'));\nprint(Panama);\nMap.addLayer(Panama, {color: 'green'}, 'Panama Province');\nvar districts = ee.List(['Arraij\u00e1n', 'Panam\u00e1', 'San Miguelito']);\nvar AOI = Panama.filter(ee.Filter.inList('ADM2_NAME', districts));\nvar AOI_ = AOI.union();\nMap.addLayer(AOI_, {color: 'blue'}, 'Area of Interest');\n// Setting the Map to the coordinates of one of our districts\nvar centroid_coor =  AOI_.geometry().centroid().coordinates().getInfo();\nvar x = centroid_coor[0];\nvar y = centroid_coor[1];\nMap.setCenter(x, y, 10);\n// Setting visualization parameters\nvar band_viz = {\nmin: 0,\nmax: 0.0002,\npalette: ['white', 'orange', 'red', 'cyan', 'purple', 'green']\n};\n// Setting the start and end date\n// and creating the list of month and dates\nvar date_start = ee.Date('2020-01-01');\nvar date_end= ee.Date('2022-12-31');\nvar months = ee.List.sequence(1, 12);//separate by years\nvar years = ee.List.sequence(date_start.advance(-1,\"year\")\n.get(\"year\"),\ndate_end.get(\"year\"));\n// Creating the image composites (monthly time series)\n// of Sentinel-5P tropospheric NO2 density\nvar year_composite = years.map(function(y){\nreturn months.map(function(m){\nreturn ee.ImageCollection('COPERNICUS/S5P/OFFL/L3_NO2')\n.select('tropospheric_NO2_column_number_density')\n.filter(ee.Filter.calendarRange(y, y,'year'))\n.filter(ee.Filter.calendarRange(m, m,'month'))\n.median()\n.set('year',y)\n.set('month', m)\n.clip(AOI_);\n})});\nfunction decomposeList(l) {\nreturn ee.ImageCollection.fromImages(l).toList(12);\n}\nvar list_imgs = year_composite.map(decomposeList).flatten();\n// Setting as index the year and month \n// of the layer being created\nfunction renameImages(img){\nvar img_1 = ee.Image(img);\nvar value = ee.Number(img_1.get('year')).format('%04d')\n.cat('_').cat(ee.Number(img_1.get('month')).format('%02d'));\nvar img_2 = img_1.set('system:index', value, 'system:id', value);\nreturn img_2;\n}\nvar list_imgs_renamed = list_imgs.map(renameImages);\nvar img_collection = ee.ImageCollection.fromImages(list_imgs_renamed);\n// Create time lapse \nvar text = require('users/gena/packages:text'); // Import gena's package which allows text overlay on image\nvar annotations = [\n{position: 'left', offset: '0.25%', margin: '0.25%', property: 'label', scale: 1000} //large scale because image if of the whole world. Use smaller scale otherwise\n];\nfunction addText(image){\nvar timeStamp = image.id();\nvar image_ = image.visualize(band_viz).set({'label':timeStamp}); // set a property called label for each image\nvar annotated = text.annotateImage(image_, {}, AOI_.geometry(), annotations); // create a new image with the label overlayed using gena's package\nreturn annotated;\n}\nvar extent = AOI_.geometry().bounds();\nvar buffered_extent = extent.buffer(ee.Number(10000).sqrt().divide(2), 1).bounds();\n// Define GIF visualization parameters.\nvar gifParams = {\n'region': buffered_extent,\n'dimensions': 600,\n//'crs': 'EPSG:3857',\n'framesPerSecond': 1.5\n};\nvar annotated_collection = img_collection.map(addText);\n// Print the GIF URL to the console.\nprint(ui.Thumbnail(annotated_collection, gifParams));\nui.Thumbnail(annotated_collection, gifParams);\n// Define the chart and print it to the console.\nvar chart =\nui.Chart.image\n.seriesByRegion({\nimageCollection: img_collection,\nband: 'tropospheric_NO2_column_number_density',\nregions: AOI_,\nreducer: ee.Reducer.mean(),\nscale: 500,\nseriesProperty: 'label',\nxProperty: 'system:id'\n})\n.setOptions({\ntitle: 'tropospheric NO2 column number density Years 2019-2022',\nhAxis: {title: 'Date', titleTextStyle: {italic: false, bold: true},\nformat: 'short'\n},\nvAxis: {\ntitle: 'NOx \u00b5mol/m2',\ntitleTextStyle: {italic: false, bold: true},\n},\nlineWidth: 3,\n});\n//print(chart);\nprint(img_collection);\n// Adding yearly composites\nvar imgs_2019 = img_collection.filter(ee.Filter.eq('year', 2019));\nMap.addLayer(imgs_2019.mean(), band_viz, 'S5P N02_2019');\nvar imgs_2020 = img_collection.filter(ee.Filter.eq('year', 2020));\nMap.addLayer(imgs_2020.mean(), band_viz, 'S5P N02_2020');\nvar imgs_2021 = img_collection.filter(ee.Filter.eq('year', 2021));\nMap.addLayer(imgs_2021.mean(), band_viz, 'S5P N02_2021');\nvar imgs_2022 = img_collection.filter(ee.Filter.eq('year', 2022));\nMap.addLayer(imgs_2022.mean(), band_viz, 'S5P N02_2022');\n</code></pre> <p> Please Note: All examples provided in this documentation have been created within the Google Earth Engine platform with the intention of ensuring reproducibility. If you encounter any issues or have questions, feel free to reach out to me at rogeralmengor@gmail.com. The code is made available for public use without any legal restrictions, but I would greatly appreciate it if you could acknowledge my efforts in developing these tools. Your recognition would mean a lot to me as a fellow developer.</p>"}]}