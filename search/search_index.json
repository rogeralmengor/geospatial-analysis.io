{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Geospatial Analysis Toolbox","text":"<p>The Geospatial Analysis Toolbox is a collection of functions and algorithms designed to assist geospatial developers in solving common problems encountered in geospatial analysis. This repository provides implementations of these solutions in the programming languages, including Python, Julia, and Geoogle Earth Engine Java Script API. The examples can be modified to fit the requirements of your geospatial solutions.</p>"},{"location":"#author","title":"Author:","text":"<p>Roger Almengor Gonz\u00e1lez</p>"},{"location":"#contact-and-website","title":"Contact and website","text":"<p>rogeralmengor@gmail.com roger-almengor.xyz</p>"},{"location":"javascript/","title":"Javascript","text":"<p>Welcome to the \"JavaScript\" section of this documentation. This section is dedicated to providing a solution-based approach to various geospatial analytics problems, complete with code explanations and illustrative outputs. The code presented here is based on the concepts and functionalities offered by the Google Earth Engine (GEE) JavaScript API.</p> <p>If you are unfamiliar with the GEE JavaScript API or need further information on its usage and capabilities, you can refer to the official Google Earth Engine JavaScript API documentation. This documentation serves as a valuable resource for understanding the core functionalities of the GEE platform and its JavaScript API, which form the foundation for the solutions and projects presented in this section. </p> <p>Feel free to explore the projects and code examples provided here to gain insights into how GEE can be leveraged for various geospatial analysis tasks.</p>"},{"location":"javascript/#time-lapse-landsat-images","title":"Time Lapse (Landsat Images)","text":"<p>Time lapse animations, are an interesting tool used to visualize changes on the earth surface over time. The following animation is created by the code provided, and shows the changes over a 20 years period of time by the construction of a river dam in the province of Chiriqui, Republic of Panam\u00e1.</p> <p> Time Lapse of Landsat Images from the Google Earth Engine platform. </p> Code time_lapse.js<pre><code>/*******************************************************************************\n * Downloading Image Chips for Hidroelectrica dos Mares\n * Location: El Valle de Las Lomas, Chiriqu\u00ed, Panam\u00e1\n * Author: Roger Almengor Gonz\u00e1lez\n * Data 26.09.2022\n * Project: CAP 2022\n * Land: Bayern\n * ****************************************************************************/\n// Feature Collection \nvar municipalities = ee.List(['Bijagual', 'Chiriqu\u00ed', 'Cochea', 'David',\n'Las Lomas','Gualaca', 'Rinc\u00f3n', 'Paja de Sombrero', 'Caldera', 'Dos R\u00edos', 'Los Anastacios', 'Dolega', 'Pedregal', 'San Pablo Viejo', 'San Pablo Nuevo', 'San Carlos', 'Hornito', 'Tinajas'])\nvar AOI = table.filter(ee.Filter.inList('NAME_3', municipalities));\nvar municipalities = AOI.filter(ee.Filter.eq('NAME_1', 'Chiriqu\u00ed'));\nvar district_list = ee.List(['Gualaca', 'Boquete', 'Dolega', 'David'])\nvar municipalities = municipalities.filter(ee.Filter.inList('NAME_2', district_list))\nprint(AOI);\nMap.addLayer(municipalities);\nvar cochea_district = table.filter(ee.Filter.eq('NAME_3', 'Chiriqu\u00ed'))\nvar centroid_cochea_coor = cochea_district.geometry().centroid()\n.coordinates().getInfo()\nvar x = centroid_cochea_coor[0];\nvar y = centroid_cochea_coor[1];\nprint(x); print(y);\nMap.setCenter(x, y, 12);\n// Elaborating the dates\n// Getting Temperatures for Every Month\nvar period = ['-01-01', '-12-01']; var years = [['1999', '2000'],\n['2000', '2001'],\n['2001', '2002'],\n['2002', '2003'],\n['2003', '2004'],\n['2004', '2005'],\n['2005', '2006'],\n['2006', '2007'],\n['2007', '2008'],\n['2008', '2009'], ['2009', '2010'], ['2010', '2011'],\n['2011', '2012'],\n['2012', '2013'],\n['2013', '2014'],\n];\nvar add_period = function(year){\nvar start_date = period[0]; var end_date = period[1];\nreturn [year[0] + start_date, year[1] + end_date];\n};\nvar visualization = {\nbands: ['SR_B4', 'SR_B3', 'SR_B2'],\nmin: 0.0,\nmax: 0.4,\n};\nvar visualization_ = {\nbands: ['SR_B4_median', 'SR_B3_median', 'SR_B2_median'],\nmin: 0.0,\nmax: 0.4,\n};\nvar concatenate_year_with_periods = function(years, period){\nreturn years.map(add_period);\n};\nvar Dates = concatenate_year_with_periods(years, period);\nprint(Dates);\n/***********************************************************************\n   Landsat 5\n************************************************************************/\n// Applies scaling factors.\nfunction applyScaleFactors(image) {\nvar opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);\nvar thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);\nreturn image.addBands(opticalBands, null, true)\n.addBands(thermalBand, null, true);\n}\nvar dataset = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')\n.filterDate('1999-01-01', '2020-12-31')\n.filterBounds(municipalities)\n.map(applyScaleFactors)\n.map(function(image){return image.clip(municipalities)});\n/*******************************************************************************\n* Downloading Image Chips for Hidroelectrica dos Mares\n* Location: El Valle de Las Lomas, Chiriqu\u00ed, Panam\u00e1\n* Author: Roger Almengor Gonz\u00e1lez\n* Data 26.09.2022\n* Project: CAP 2022\n* Land: Panama\n* *****************************************************************************/\n// Feature Collection \n//var municipalities = ee.List(['Bijagual', 'Chiriqu\u00ed', 'Cochea', 'David',\n// 'Las Lomas','Gualaca', 'Rinc\u00f3n',\n//'Paja de Sombrero', 'Caldera', 'Dos R\u00edos', 'Los Anastacios', 'Dolega', \n//'Pedregal', 'San Pablo Viejo', 'San Pablo Nuevo', 'San Carlos', 'Hornito', \n// 'Tinajas'])\n// Feature Collection \nvar municipalities = ee.List(['Bijagual','Cochea','Las Lomas'])\nvar AOI = table.filter(ee.Filter.inList('NAME_3', municipalities));\nvar municipalities = AOI.filter(ee.Filter.eq('NAME_1', 'Chiriqu\u00ed'));\nvar district_list = ee.List(['Gualaca', 'Boquete', 'Dolega', 'David'])\nvar municipalities = municipalities.filter(ee.Filter.inList('NAME_2', district_list))\n// Gets the bounds and create geometry\nvar extent = municipalities.geometry().bounds();\nvar buffered_extent = extent.buffer(ee.Number(10000)\n.sqrt()\n.divide(2), 1)\n.bounds();\n//var municipalities = geometry\nMap.addLayer(municipalities);\nvar cochea_district = table.filter(ee.Filter.eq('NAME_3', 'Bijagual'))\nvar centroid_cochea_coor = cochea_district.geometry()\n.centroid()\n.coordinates()\n.getInfo()\nvar x = centroid_cochea_coor[0];\nvar y = centroid_cochea_coor[1];\nMap.setCenter(x, y, 10);\n// Elaborating the dates\n// Getting Temperatures for Every Month\nvar period = ['-01-01', '-12-01']; var years = [['1999', '2000'],\n['2000', '2001'],\n['2001', '2002'],\n['2002', '2003'],\n['2003', '2004'],\n['2004', '2005'],\n['2005', '2006'],\n['2006', '2007'],\n['2007', '2008'],\n['2008', '2009'], ['2009', '2010'], ['2010', '2011'],\n['2011', '2012'],\n['2012', '2013'],\n['2013', '2014'],\n];\nvar add_period = function(year){\nvar start_date = period[0]; var end_date = period[1];\nreturn [year[0] + start_date, year[1] + end_date];\n};\nvar visualization = {\nbands: ['SR_B4', 'SR_B3', 'SR_B2'],\nmin: 0.0,\nmax: 0.4,\n};\nvar visualization_ = {\nbands: ['SR_B4_median', 'SR_B3_median', 'SR_B2_median'],\nmin: 0.0,\nmax: 0.4,\n};\nvar concatenate_year_with_periods = function(years, period){\nreturn years.map(add_period);\n};\nvar Dates = concatenate_year_with_periods(years, period);\n/**********************************************************************\n    Landsat 7 \n***********************************************************************/\nvar visualization = {\nbands: ['B4', 'B3', 'B2'],\nmin: 0.0,\nmax: 0.3,\n};\nvar visualization_ = {\nbands: ['B4_median', 'B3_median', 'B2_median'],\nmin: 0.0,\nmax: 0.5,\ngamma: [0.95, 1.1, 1]\n};\n// Applies scaling factors.\nvar cloudMaskL7 = function(image) {\nvar qa = image.select('BQA');\nvar cloud = qa.bitwiseAnd(1 &lt;&lt; 4)\n.and(qa.bitwiseAnd(1 &lt;&lt; 6))\n.or(qa.bitwiseAnd(1 &lt;&lt; 8));\nvar mask2 = image.mask().reduce(ee.Reducer.min());\nreturn image\n//.select(['B3', 'B4'], ['Red', 'NIR'])\n.updateMask(cloud.not()).updateMask(mask2)\n.set('system:time_start', image.get('system:time_start'));\n};\nvar dataset = ee.ImageCollection('LANDSAT/LE07/C01/T1_TOA')\n.filterDate('1999-01-01', '2020-12-31')\n.filterBounds(AOI)\n//.map(applyScaleFactors)\n.map(cloudMaskL7)\n.map(function(image){return image.clip(municipalities)});\n//dataset = dataset.map(applyScaleFactors);\n// Creating composites using median pixel value\nvar median_yearly_landsat_7 = function(start, end){\nvar dataset_ =  dataset.filter(ee.Filter.date(start, end));\nvar median_yearly = dataset_.reduce(ee.Reducer.median());\nreturn median_yearly;\n};\nvar composite_name_list_l7 = ee.List([]);\nvar apply_monthly_composite = function(date_list){\nvar start = date_list[0];\nvar end = date_list[1]; var output_name = start + \"TO\" + end + \"_LANSAT_7\";\nvar composite = median_yearly_landsat_7(start, end);\ncomposite_name_list_l7 = composite_name_list_l7.add([composite, output_name]);\nMap.addLayer(composite, visualization_, output_name, false);\nExport.image.toDrive({\nimage: composite,\ndescription: output_name,\nfileFormat: 'GeoTIFF',\ncrs : 'EPSG:4326',\nfolder : 'LANDSAT_LST_LAS_LOMAS',\nregion: municipalities\n});\nreturn 0; };\nDates.map(apply_monthly_composite); /******************************************************************\n// Animation gif \n// Create RGB visualization images for use as animation frames.\n/******************************************************************/\nvar text = require('users/gena/packages:text');\nvar annotated_collection_list = ee.List([])\nvar annotations = [\n{position: 'left', offset: '0.25%', margin: '0.25%', property: 'label', scale: 250} //large scale because image if of the whole world. Use smaller scale\n];\nvar create_annotated_collection = function(image_and_id) {\nvar img = image_and_id[0];\nvar image_id = image_and_id[1];\nprint(image_id);\nvar img_out = img.visualize(visualization_)\n//.clip(geometry)//.paint(municipalities, 'FF0000', 2)\n.set({'label': image_id});\nMap.addLayer(img_out);\nvar annotated = text.annotateImage(img_out, {}, Bayern, annotations);\nannotated_collection.add(annotated);\nreturn 0;\n};\nvar municipalities_geom = geometry;\nvar n = composite_name_list_l7.size().getInfo();\nprint(n);\nfor (var i = 0; i &lt; n; i++) {\nvar img_info = ee.List(composite_name_list_l7.get(i));\nprint(img_info);\nvar img = ee.Image(img_info.get(0));\nvar img_id = ee.String(img_info.get(1));\nvar year = ee.String(ee.List(img_id.split(\"-\").get(0)));\nvar month = ee.String(ee.List(img_id.split(\"-\").get(1)));\nvar img_id_ = year.getInfo() // + \"_\" + month.getInfo();\nvar img_out = img.visualize(visualization_)\n//.paint(geometry, 'FF0000', 2)\n.set({'label': img_id_});\nvar annotated = text.annotateImage(img_out, {}, buffered_extent, annotations);\nMap.addLayer(annotated);\nvar annotated_collection_list = annotated_collection_list.add(annotated)\n}\nvar annotated_col = ee.ImageCollection(annotated_collection_list)\n// Define GIF visualization parameters.\nvar gifParams = {\n'region': buffered_extent,\n'dimensions': 508,\n//'crs': 'EPSG:32632',\n'framesPerSecond': 1\n};\n// Print the GIF URL to the console.\nprint(annotated_col.getVideoThumbURL(gifParams));\n// Render the GIF animation in the console.\nprint(ui.Thumbnail(annotated_col, gifParams));\n</code></pre>"},{"location":"javascript/#measuring-land-surface-temperature-with-modis-data","title":"Measuring land surface temperature with MODIS data","text":"<p>Script Description: This script is designed to analyze temperature changes within the Cochea River watershed using the Google Earth Engine (GEE) platform and MODIS (Moderate Resolution Imaging Spectroradiometer) datasets. Specifically, it focuses on measuring temperature variations during both the rainy and dry seasons over a 20-year period. The primary objectives of this script are to generate an animated GIF, a time series graph depicting the Average Median Temperature (\u00b0C) as recorded by the MODIS sensor, and a regional overview of the study area.</p> <p>Script Workflow: 1. Data Acquisition: The script begins by accessing MODIS datasets, which provide reliable temperature data with global coverage and high temporal resolution.</p> <ol> <li> <p>Temporal Selection: It then filters the MODIS data to isolate the specific time periods corresponding to the dry and wet seasons over the 20-year span.</p> </li> <li> <p>Spatial Region Selection: The script defines the study area within the Cochea River watershed, ensuring that the analysis is limited to the relevant geographic scope.</p> </li> <li> <p>Temperature Computation: Using the MODIS temperature data, the script calculates the Average Median Temperature (\u00b0C) for each pixel within the study area, both for the dry and wet seasons.</p> </li> <li> <p>Visualization Generation:</p> </li> <li> <p>Animated GIF: The script generates an animated GIF, showcasing the temporal evolution of temperature changes over the 20-year period. Each frame of the GIF represents a specific time step, offering a dynamic visual representation of temperature variations.     <p> Time Lapse of MODIS Land Surface Temperature (Dry Season) from the Google Earth Engine platform. </p> <p> Time Lapse of MODIS Land Surface Temperature (Rainy Season) from the Google Earth Engine platform. </p> </p> </li> <li> <p>Time Series Graph: Additionally, the script creates a time series graph, displaying the Average Median Temperature (\u00b0C) as a function of time. This graph provides a clear overview of temperature trends during the dry and wet seasons.     <p> Average median temperature for the Dry Season measured from MODIS time series. </p> </p> <p><p> Average median temperature for the Wet Season measured from MODIS time series. </p> </p> </li> <li> <p>Regional View: Lastly, the script produces a regional view of the study area, allowing users to geospatially contextualize the temperature changes observed in the Cochea River watershed.</p> </li> </ol> <p>By following this technical script, users can conduct a rigorous analysis of temperature fluctuations within the specified region and timeframes, enabling in-depth insights into environmental changes over the 20-year period.</p> Code land_surface_MODIS.js<pre><code>// Feature Collection \nvar districts = ee.List(['Bijagual','Cochea','Las Lomas'])\nvar AOI = table.filter(ee.Filter.inList('NAME_3', districts));\nvar districts = AOI.filter(ee.Filter.eq('NAME_1', 'Chiriqu\u00ed'));\nMap.addLayer(districts.union())\n// Setting the Map to the coordinates of one of our districts\nvar cochea_district = table.filter(ee.Filter.eq('NAME_3', 'Bijagual'));\nvar centroid_cochea_coor = cochea_district.geometry().centroid().coordinates().getInfo();\nvar x = centroid_cochea_coor[0];\nvar y = centroid_cochea_coor[1];\nMap.setCenter(x, y, 10);\n// Raster Visualization Parameters\nvar landSurfaceTemperatureVis = {\nmin: 0, max: 40,\npalette: ['blue', 'limegreen', 'yellow', 'darkorange', 'red']};\n// Image Collection MODIS Surface Temperature Median Values \n// (Dry Season January - March)\n// (Wet Season April - December)\nvar startYear = 2001;\nvar endYear = 2020;\nvar DrySeasonMedianCollection = ee.ImageCollection(\nee.List.sequence(startYear, endYear)\n.map(createDrySeasonMedianComposite)\n);\nvar WetSeasonMedianCollection = ee.ImageCollection( ee.List.sequence(startYear, endYear)\n.map(createWetSeasonMedianComposite)\n);\nfunction createDrySeasonMedianComposite(year) {\nvar startDate = ee.Date.fromYMD(year, 1, 1);\nvar endDate = ee.Date.fromYMD(year, 3, 31);\nvar description = startDate.format('yyyy-MM-dd')\n.cat(' TO ')\n.cat(endDate.format('yyyy-MM-dd'));\nreturn ee.ImageCollection('MODIS/061/MOD11A1')\n.filterBounds(districts)\n.filterDate(startDate, endDate)\n.select('LST_Day_1km')\n.map(function(img) {\nreturn img\n.multiply(0.02)\n.subtract(273.15)\n.copyProperties(img, ['system:time_start']);\n})\n.median()\n.set('year', year)\n.set('description', description);\n}\nfunction createWetSeasonMedianComposite(year) {\nvar startDate = ee.Date.fromYMD(year, 4, 1);\nvar endDate = ee.Date.fromYMD(year, 12, 31);\nvar description = startDate.format('yyyy-MM-dd')\n.cat(' TO ')\n.cat(endDate.format('yyyy-MM-dd'));\nreturn ee.ImageCollection('MODIS/061/MOD11A1')\n.filterBounds(districts)\n.filterDate(startDate, endDate)\n.select('LST_Day_1km')\n.map(function(img) {\nreturn img\n.multiply(0.02)\n.subtract(273.15)\n.copyProperties(img, ['system:time_start']);\n})\n.median()\n.set('year', year)\n.set('description', description);\n}\nDrySeasonMedianMultiBandImg = DrySeasonMedianCollection\n.toBands()\n.select('[0-9]{1,2}_LST_Day_1km');\nWetSeasonMedianMultiBandImg = WetSeasonMedianCollection\n.toBands()\n.select('[0-9]{1,2}_LST_Day_1km');\n// Define a dictionary that associates band names with values \nvar TempInfo = {\n'0_LST_Day_1km': {v: 1, f: '2001'},\n'1_LST_Day_1km': {v: 2, f: '2002'},\n'2_LST_Day_1km': {v: 3, f: '2003'},\n'3_LST_Day_1km': {v: 4, f: '2004'},\n'4_LST_Day_1km': {v: 5, f: '2005'},\n'5_LST_Day_1km': {v: 6, f: '2006'},\n'6_LST_Day_1km': {v: 7, f: '2007'},\n'7_LST_Day_1km': {v: 8, f: '2008'},\n'8_LST_Day_1km': {v: 9, f: '2009'},\n'9_LST_Day_1km': {v: 10, f: '2010'},\n'10_LST_Day_1km': {v: 11, f: '2011'},\n'11_LST_Day_1km': {v: 12, f: '2012'},\n'12_LST_Day_1km': {v: 13, f: '2013'},\n'13_LST_Day_1km': {v: 14, f: '2014'},\n'14_LST_Day_1km': {v: 15, f: '2015'},\n'15_LST_Day_1km': {v: 16, f: '2016'},\n'16_LST_Day_1km': {v: 17, f: '2017'},\n'17_LST_Day_1km': {v: 18, f: '2018'},\n'18_LST_Day_1km': {v: 19, f: '2019'},\n'19_LST_Day_1km': {v: 20, f: '2020'},\n}\nvar xPropVals = [];\nvar xPropLabels = [];\nfor (var key in TempInfo){\nxPropVals.push(TempInfo[key].v);\nxPropLabels.push(TempInfo[key]);\n}\n// Apply the dissolve method to the Geometry object.\nprint(districts)\nvar geometryDissolve = districts.union();\n// Define the chart and print it to the console.\nvar chartDrySeason = ui.Chart.image\n.regions({\nimage: DrySeasonMedianMultiBandImg,\nregions: districts.union(),\nreducer: ee.Reducer.mean(),\nscale: 500,\nseriesProperty: 'label',\nxLabels: xPropVals\n})\n.setChartType('LineChart')\n.setOptions({\ntitle: 'Average (Median) Temperature (\u00b0C) Dry Season (Jan-Mar)',\nhAxis: {\ntitle: 'Year',\ntitleTextStyle: {italic: false, bold: true},\nticks: xPropLabels\n},\nvAxis: {\ntitle: 'Temperature (\u00b0C)',\ntitleTextStyle: {italic: false, bold: true}\n},\ncolors: ['f0af07', '0f8755', '76b349'],\nlineSize: 3\n});\nprint(chartDrySeason);\n// Define the chart and print it to the console.\nvar chartWetSeason = ui.Chart.image\n.regions({\nimage: WetSeasonMedianMultiBandImg ,\nregions: districts.union(),\nreducer: ee.Reducer.mean(),\nscale: 500,\nseriesProperty: 'label',\nxLabels: xPropVals\n})\n.setChartType('LineChart')\n.setOptions({\ntitle: 'Average (Median) Temperature (\u00b0C) Rainy Season (Apr-Dec)',\nhAxis: {\ntitle: 'Year',\ntitleTextStyle: {italic: false, bold: true},\nticks: xPropLabels\n},\nvAxis: {\ntitle: 'Temperature (\u00b0C)',\ntitleTextStyle: {italic: false, bold: true}\n},\ncolors: ['0f8755', '76b349'],\nlineSize: 3\n});\nprint(chartWetSeason);\n// Define GIF visualization parameters.\nvar gifParams = {\n'region': buffered_extent,\n'dimensions': 600,\n'framesPerSecond': 1.5\n};\nvar text = require('users/gena/packages:text'); // Import gena's package which allows text overlay on image\nvar annotations = [\n{position: 'left', offset: '0.25%', margin: '0.25%', property: 'label', scale: 100} //large scale because image if of the whole world. Use smaller scale otherwise\n];\nfunction addText(image){\nvar image_0 = image.clip(districts.union());\nvar timeStamp = image.get('description'); // get the time stamp of each frame. This can be any string. Date, Years, Hours, etc.\nvar timeStamp_ = ee.String(timeStamp); //convert time stamp to string \nvar image_ = image_0.visualize(landSurfaceTemperatureVis).set({'label':timeStamp}); // set a property called label for each image\nvar annotated = text.annotateImage(image_, {}, extent, annotations); // create a new image with the label overlayed using gena's package\nreturn annotated;\n}\nvar AnnotatedCollectionWetSeason = WetSeasonMedianCollection.map(addText); //add time stamp to all images\nvar AnnotatedCollectionDrySeason = DrySeasonMedianCollection.map(addText);\nprint(ui.Thumbnail(AnnotatedCollectionWetSeason,  gifParams));\nvar AnnotatedCollectionDrySeason = DrySeasonMedianCollection.map(addText);\nprint(ui.Thumbnail(AnnotatedCollectionDrySeason,  gifParams));\n// ui.Map objects can be constructed. Here, a new map is declared.\nvar newMap = ui.Map({\ncenter: {lat: 8, lon: -80, zoom: 5.5\n},\nstyle: {position: 'bottom-right', width: '400px'}\n});\nvar geomLayer = ui.Map.Layer(districts.union(), {color: 'red'}, 'Area of Interest');\nvar extentLayer = ui.Map.Layer(districts.bounds, {color:'red'}, 'Extent');\nnewMap.add(geomLayer);\nnewMap.add(extentLayer);\n// Add the newMap to the defaultMap;\nMap.add(newMap);\n// Other UI widgets can be added to ui.Map objects, for example labels:\ndefaultMap.add(ui.Label('Countrywide location', {position: 'bottom-left'}));\nnewMap.add(ui.Label('Regional Location', {position: 'bottom-left'}));\nMap.setControlVisibility({all: false});\nnewMap.setControlVisibility({all: false});\nMap.setOptions(\"SATELLITE\");\n</code></pre>"}]}